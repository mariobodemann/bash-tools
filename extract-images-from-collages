#!/usr/bin/env python3
# coding: utf-8
#
# Find images in a collage, rectify them, and extract them to separate files.
#
# Using the magic of OpenCV and math™. :scary: 
#

import cv2
import numpy
import os
import argparse

class Configuration:
    """
        Configuration of the collage image extractor.

        Use `parse()` to read command line arguments to fill configuration
    """

    def __init__(self):
        self.input_folder="."
        self.input_extension="jpg"
        self.output_folder="."
        self.output_extension="png"
        self.expected_subimage_count=0
        self.extract_all=False
        self.border=10
        self.blur_radius=11
        self.threshold=240
        self.min_area=10
        self.debug=False

    def parse(self):
        parser = argparse.ArgumentParser(description='Extract images from a collaged image.')
        parser.add_argument('-i', '--input', nargs='?', default=self.input_folder, help='Select the input folder to be searched for collages.')
        parser.add_argument('-I', '--input_extension', nargs='?', default=self.input_extension, help='What image extension should we look for in the input folder?')
        parser.add_argument('-o', '--output', nargs='?', default=self.output_folder, help='Where should the subimages of the collage be stored?')
        parser.add_argument('-O', '--output_extension', nargs='?', default=self.output_extension, help='Set the extension of all the output files.')
        parser.add_argument('-e', '--expected_finds', nargs='?', type=int, default=self.expected_subimage_count, help='If set to something bigger then zero, highlight when less images are extracted.')
        parser.add_argument('-m', '--min_area', nargs='?', type=int, default=self.min_area, help='Min area in pixel to be extracted.')
        parser.add_argument('-E', '--extract_all', action='store_true', default=self.extract_all, help='Extract all subimages, no matter the size.')
        parser.add_argument('-b', '--border', nargs='?', type=int, default=self.border, help='How big of a border do you want arround every collage?')
        parser.add_argument('-B', '--blur_radius', nargs='?', type=int, default=self.blur_radius, help='Increase the blur radius of the input collage.')
        parser.add_argument('-t', '--threshold', nargs='?', type=int, default=self.threshold, help='above which white value should we considere it white?')
        parser.add_argument('-d', '--debug', action='store_true', default=self.debug, help='If used, this will extract the found images in a special files in the output folder.')

        args = parser.parse_args()

        self.input_folder = args.input
        if not os.path.exists(self.input_folder):
            os.mkdir(self.input_folder)
        
        self.input_extension = args.input_extension

        self.output_folder = args.output
        if not os.path.exists(self.output_folder):
            os.mkdir(self.output_folder)

        self.output_extension = args.output_extension

        self.expected_subimage_count = args.expected_finds

        self.extract_all = args.extract_all

        self.min_area = args.min_area

        self.border = args.border
        
        self.blur_radius = args.blur_radius
        if self.blur_radius % 2 != 1:
            raise ValueError("Blur radius must be odd. Use 1 or 3 or 5 or ….")

        self.threshold = args.threshold

        self.debug= args.debug

        return self
    

#
# Do the thing™
#
def extract(conf):
    if conf.debug:
        print(vars(conf))

    missing = []
    for file in sorted(os.listdir(conf.input_folder)):
        print('Checking file "%s".' % file)
        
        if not file.endswith(conf.input_extension):
            print('… input extension "%s" not found, ignoring this file.' % conf.input_extension)
            continue

        print('… found collage, extracting images.')

        try:
            # read collage for finding images
            img = cv2.imread(conf.input_folder + '/' + file,0)
            img = cv2.copyMakeBorder(img, conf.border, conf.border, conf.border, conf.border, cv2.BORDER_CONSTANT, None, 255)
            img = cv2.GaussianBlur(img, (conf.blur_radius, conf.blur_radius), 0)
            area = img.shape[0] * img.shape[1]
            
            # read 2 more times: one for cropping, and one for output of debug info
            img_to_crop = cv2.imread(conf.input_folder+'/'+file,3)
            img_found = img_to_crop.copy()
            img_found = cv2.copyMakeBorder(img_found, conf.border, conf.border, conf.border, conf.border, cv2.BORDER_CONSTANT, None, (255, 255, 255))
            
            ret,thresh = cv2.threshold(img, conf.threshold, 255, cv2.THRESH_BINARY)
            contours, hierarchy = cv2.findContours(thresh, 1, 4)
           
            images_found = 0 
            for cnt in contours:
                rect = cv2.minAreaRect(cnt)
                box = cv2.boxPoints(rect)
                box = numpy.int0(box)

                contArea = cv2.contourArea(box) 
                if conf.extract_all or contArea > conf.min_area or (contArea > area / 10 and contArea < area * 2 / 3):
                    cv2.drawContours(img_found,[box],0,(0,0,255),2)
                    
                    # extract perspective correct images
                    width = int(rect[1][0])
                    height = int(rect[1][1])
                    src_pts = box.astype("float32")
                    dst_pts = numpy.array([[0, height-1],
                            [0, 0],
                            [width-1, 0],
                            [width-1, height-1]], dtype="float32")
                    M = cv2.getPerspectiveTransform(src_pts, dst_pts)
                    warped = cv2.warpPerspective(img_to_crop, M, (width, height))

                    cv2.imwrite('%s/%s.%04d.%s' %(conf.output_folder, file[:-(len(conf.input_extension)+1)], images_found, conf.output_extension), warped)
                    images_found += 1

            if conf.debug: 
                cv2.imwrite('%s/%s.threshold.%s' %(conf.output_folder, file[:-(len(conf.input_extension)+1)], conf.output_extension), thresh)
                cv2.imwrite('%s/%s.found.%s' %(conf.output_folder, file[:-(len(conf.input_extension)+1)], conf.output_extension), img_found)

            print('… found and saved %d subimages.' % images_found)

            if conf.expected_subimage_count > 0 and conf.expected_subimage_count > images_found:
                missing.append((file, images_found))
                print('\033[31m… %d subimage(s) missing.\033[m' % (conf.expected_subimage_count - images_found))

        except Exception as e:
            print('Something went wrong')
            print(e)

    print('\nExtraction complete.')

    if len(missing) > 0:
        print('\033[31mFollowing files contained less subimages:')
        print('\tfile -> extracted images (expected: %d)\033[m' % conf.expected_subimage_count)

        for file, image_count in missing:
            print( '\033[31m\t%s -> %d\033[m' % (file, image_count))


#
# Call the thing™.
#
conf = Configuration().parse()

extract(conf)
