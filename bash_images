function panoramize_image() {
	image=$1
	shift
	if [ -z "$image" ]; then
		echo 'error: please specify image.' >&2
	else
		size="$(identify ${image} | grep -o '[0-9]*x[0-9]*' | head -1)"
		regex="([0-9]+)x([0-9]+)";

		if [[ ${size} =~ ${regex} ]]; then
			width="${BASH_REMATCH[1]}"
			height="${BASH_REMATCH[2]}"

			exiftool -FullPanoWidthPixels=${width} ${image}
			exiftool -FullPanoHeightPixels=${height} ${image}
			exiftool -UsePanoramaViewer=True ${image}
        		1exiftool -ProjectionType=equirectangular ${image}
			echo done
			exiftool $image
		else
			echo 'input has wrong size.' >&2
		fi;

	fi
}

function svg_to_ic() {
	input=${1}
	shift

	re="^(.*),([0-9]+)x(.+)";

	sizes='./app/src/main/res/mipmap-xxxhdpi/ic_launcher.png,192x192
./app/src/main/res/mipmap-xxhdpi/ic_launcher.png,144x144
./app/src/main/res/mipmap-xhdpi/ic_launcher.png,96x96
./app/src/main/res/mipmap-mdpi/ic_launcher.png,48x48
./app/src/main/res/mipmap-hdpi/ic_launcher.png,72x72
./app/src/main/ic_launcher-web.png,512x512'


	for s in ${sizes}; do
		if [[ "${s}" =~ ${re} ]]; then
			output=${BASH_REMATCH[1]};
			width=${BASH_REMATCH[2]};
			height=${BASH_REMATCH[3]};

			echo 'Working on "' ${output} '" ...'

			inkscape ${input} -w${width} -h${height} --export-background-opacity=0 --export-png=${output}
		else
			echo 'Internal error for "'$s'", please check "sizes" variable.'
		fi
	done
}

function video-to-gif() {
	input=${1}
	shift

	if [ -z "${input}" ]; then
		input="-";
	fi

	output=${1}
	shift

	if [ -z "${output}" ]; then
		output="/tmp/output.gif"
	fi

	options=${1}
	shift

	if [ -z "${options}" ]; then
		options="fps=25,scale=640:-1"
	fi

	figlet 'generating palette'
	ffmpeg -y -i "${input}" -vf "${options}:flags=lanczos,palettegen" /tmp/palette.png

	figlet 'generating gif'
	ffmpeg -i "${input}" -i /tmp/palette.png -filter_complex "${options}:flags=lanczos[x];[x][1:v]paletteuse" "${output}"
}


function mosaic_create_index() {
	if [ $# -eq 0 ]; then
		echo "Usage: ${FUNCNAME[0]} <INPUT_FOLDER> <OUTPUT_FOLDER> <COLOR_COUNT>"
		return
	fi

	IN=$1
	shift;
	if [ -z "$IN" ]; then
		in="./in"
	fi

	OUT=$1
	shift;
	if [ -z "$OUT" ]; then
		OUT="./out"
	fi

	if [ ! -e $OUT ]; then
		mkdir -p $OUT
	fi

	COLORS=$1
	shift;
	if [ -z "$COLORS" ]; then
		COLORS=16
	fi

	toilet -f pagga --gay "colorizing everything under $IN to $OUT with $COLORS colors."

	ls $IN/* | sed 's/\.gif$/.gif[0]/g' > $OUT/list

	montage -monitor -background none -alpha deactivate -geometry '1x1+0+0' @$OUT/list bmp:$OUT/colormap
	mogrify -colors $COLORS bmp:$OUT/colormap

	for file in $IN/*; do
		image=$(echo $file | sed 's/\.gif$/.gif[0]/g')
		color=$(convert -remap $OUT/colormap -colors $COLORS -alpha deactivate -colorspace hsv -scale 1x1 $image txt:- | tail -1 | grep -o 'hsv.*' | egrep -o '[0-9]{1,3}' | head -1);
		cp -v $file $OUT/$(printf %03d $color)-$(basename $file);
	done

	montage -alpha deactivate $OUT/*.*[0] $OUT/sorted
}

function mosaic_doit() {
	if [ $# -eq 0 ]; then
		echo "Usage: ${FUNCNAME[0]} INPUT_IMAGE TILES_FOLDER OUTPUT_NAME <OUTPUT_SIZE> <TILE_SIZE> <COLOR_COUNT>"
		return
	fi

	INPUT=$1
	shift;
	if [ -z "$INPUT" ]; then
		echo input missing
		return
	fi

	TILES=$1
	shift;
	if [ -z "$TILES" ]; then
		echo tiles missing
		return
	fi

	OUTPUT=$1
	shift;
	if [ -z "$OUTPUT" ]; then
		echo output missing
		return
	fi

	SIZE=$1
	shift;
	if [ -z "$SIZE" ]; then
		SIZE="256x256";
	fi

	TILE_SIZE=$1
	shift;
	if [ -z "$TILE_SIZE" ]; then
		TILE_SIZE="32x32";
	fi

	COLORS=$1
	shift
	if [ -z "$COLORS" ]; then
		COLORS=16
	fi

	convert -colors $COLORS -remap $TILES/colormap -colorspace hsv -resize $SIZE $INPUT txt:- | while IFS= read -r line; do color=$(echo $line | grep -o hsv.* | egrep -o '[0-9]{1,3}'| head -1); FOUND_TILE=$(ls $TILES/$(printf %03d $color)-* | shuf -n 1 | grep -o "$TILES/.*" | sed 's/\.gif/\.gif[0]/g'); if [ -z "$FOUND_TILE" ]; then echo xc:None; else echo $FOUND_TILE; fi; done > ${OUTPUT}.list

	montage -background None -tile $SIZE -geometry ${TILE_SIZE}+0+0 @${OUTPUT}.list $OUTPUT
}

function image() {
	${BASH_TOOLS_HOME}/image $@
}
