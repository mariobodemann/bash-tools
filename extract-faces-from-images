#!/usr/bin/env python
#
# Find faces in images, and extract them to separate files.
#
# Using the magic of OpenCV and mathâ„¢. :scary: 
#

import cv2
import numpy
import os
import traceback
import argparse

class Configuration:
    """
        Configuration of the face image extractor.

        Use `parse()` to read command line arguments to fill configuration
    """

    def __init__(self):
        self.input_folder="."
        self.input_extension="jpg"
        self.output_folder="."
        self.output_extension="png"

    def parse(self):
        parser = argparse.ArgumentParser(description='Extract faces from images.')
        parser.add_argument('-i', '--input', nargs='?', default=self.input_folder, help='Select the input folder to be searched for images.')
        parser.add_argument('-I', '--input_extension', nargs='?', default=self.input_extension, help='What image extension should we look for in the input folder?')
        parser.add_argument('-o', '--output', nargs='?', default=self.output_folder, help='Where should the faces of the images be stored?')
        parser.add_argument('-O', '--output_extension', nargs='?', default=self.output_extension, help='Set the extension of all the output files.')

        args = parser.parse_args()

        self.input_folder = args.input
        if not os.path.exists(self.input_folder):
            os.mkdir(self.input_folder)
        
        self.input_extension = args.input_extension

        self.output_folder = args.output
        if not os.path.exists(self.output_folder):
            os.mkdir(self.output_folder)

        self.output_extension = args.output_extension

        return self
    

#
# Do the thingâ„¢
#
def extract(conf):
    face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades +'haarcascade_frontalface_alt2.xml')
    
    for file in sorted(os.listdir(conf.input_folder)):
        print('Checking file "%s".' % file)
        
        if not file.endswith(conf.input_extension):
            print('â€¦ input extension "%s" not found, ignoring this file.' % conf.input_extension)
            continue

        print('â€¦ found image, extracting faces.')

        try:
            # read image, finding faces
            img = cv2.imread(conf.input_folder + '/' + file)
            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            faces = face_cascade.detectMultiScale(gray, 1.1, 4)

            if len(faces) == 0:
                print('â€¦ no faces found ðŸ˜±')
            else:
                faces_found = 0 
                for face in faces:
                    # extract perspective correct images
                    x,y,w,h = face

                    extracted = img[y:y+h, x:x+w]

                    cv2.imwrite('%s/%s.%04d.%s' %(conf.output_folder, file[:-(len(conf.input_extension)+1)], faces_found, conf.output_extension), extracted)
                    faces_found += 1

                print('â€¦ found and saved %d faces.' % (len(faces)))
        
        except Exception as e:
            print('Something went wrong')
            print(traceback.format_exc())


    print('\nExtraction complete.')

#
# Call the thingâ„¢.
#
conf = Configuration().parse()

extract(conf)
