#!/data/data/com.termux/files/usr/bin/env python

from argparse import ArgumentParser
from random import random
from math import floor


def setup():
    parser = ArgumentParser(description="Daily Word Quiz")
    parser.add_argument(
            '--file', 
            dest='filename',
            metavar="w",
            default="all.words", 
            help="Filename containing all the words to be potentially used."
        )
    parser.add_argument(
            '--width',
            type=int,
            dest='width',
            metavar="W", 
            default=10,
            help="Width of the quiz."
        )
    parser.add_argument(
            '--height',
            type=int,
            dest='height',
            metavar="H", 
            default=10,
            help="Width of the quiz."
        )
    parser.add_argument(
            '--empty-cells',
            type=int,
            dest='empty_cells',
            metavar="e", 
            default=5,
            help="How many cells should stay empty?"
        )

    return parser.parse_args()


def create_db(filename):
    print('Preparing ...')
    words = dict()
    lines = open(filename).readlines()
    for line in lines:
        word = line[:-1]
        first = word[0]
        if not first in words:
            words[first] = list()

        words[first].append(word)


    return words


def create_field(width, height):
    cells = list(map(lambda x: " ", list(range(width*height))))
    field = {
        'width': width,
        'height': height,
        'cells': cells
    }
    return field


def print_field(f):
    print('', end=' |')
    for i in range(f['width']):
        print(i % 10, end='|')

    print()
    print('-', end='+')
    for i in range(f['width']):
        print('-', end='+')

    print()

    for y in range(f['height']):
        print(y % 10, end='|')

        for x in range(f['width']):
            print(f['cells'][x+y*f['width']].upper(), end='|')

        print()
        
        for x in range(f['width'] + 1):
            print('-', end='+')

        print()


def random_word(db):
    letters = list(db.keys())
    letter = letters[floor(random() * len(letters))]
    words = db[letter]
    word = words[floor(random() * len(words))]
    return word;


def random_direction():
    dirs = ['east', 'south', 'north', 'west']
    return dirs[floor(random() * len(dirs))]


def check_word_placement(field, word, x, y, direction, place_word=False):
    w = field['width']
    h = field['height']
    c = field['cells']
   
    if len(word) == 0:
        return True
    elif x >= w or x < 0 or y >= h or y < 0:
        return False
    elif c[x+y*w] == word[0] or c[x+y*w] == ' ':
        if place_word:
            c[x+y*w] = word[0]

        if direction == 'east':
            return check_word_placement(field, word[1:], x+1, y, direction, place_word)
        elif direction == 'south':
            return check_word_placement(field, word[1:], x, y+1, direction, place_word)
        elif direction == 'west':
            return check_word_placement(field, word[1:], x-1, y, direction, place_word)
        elif direction == 'north':
            return check_word_placement(field, word[1:], x, y+1, direction, place_word)
        else:
            print("%s is not a valid direction." % direction)
            return False
    else:
        return False


def place_word(field, word, x, y, direction):
    return check_word_placement(field,word,x,y,direction,place_word=True)


def place_initial_word(field):
    initial = random_word(db)
    x = floor(field['width'] / 2 - len(initial) / 2)
    y = floor(field['height'] / 2)

    if place_word(field, initial, x, y, 'east'):
        return initial
    else:
        return False


def place_random_word(field, database, selection):

    word = random_word(database)
    
    tries = 1000
    while tries > 0 and word in selection:
        word = random_word(database)
        tries -= 1

    if tries <= 0:
        return False

    x = floor(random() * field['width'])
    y = floor(random() * field['height'])
    direction = random_direction()

    tries = 1000
    while tries > 0 and not check_word_placement(field, word, x, y, direction):
        x = floor(random() * field['width'])
        y = floor(random() * field['height'])
        direction = random_direction()
        tries -= 1

    # check if placement found
    if check_word_placement(field, word, x, y, direction):
        place_word(field, word, x, y, direction)
        selection.append(word)
        return True
    else:
        return False


config = setup()
db = create_db(config.filename)
print('... done creating database.')

print('Selecting initial word.')
field = create_field(config.width, config.height)
initial = place_initial_word(field)
print('... found initial word: %s.' % initial)

if initial:
    words = [initial]

    print("Filling field ...")
    tries = 1000
    while tries > 0 and field['cells'].count(" ") > config.empty_cells:
        place_random_word(field, db, words)
        tries -= 1
        print(".", end='')

    print()
    print_field(field)
    words.sort()
    print(words)
    
    empties = field['cells'].count(' ')
    if empties == 0:
        print("Completed.")
    else:
        print("%d empty fields left." % empties)

else:
    print("WORD %s DID NOT FIT!!" % initial)

